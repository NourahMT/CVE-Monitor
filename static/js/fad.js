function expand_desc(i) {
	// Expand and shrink the size of the clicked Description container
	if (document.getElementById('n' + i).style.maxHeight == "100ch") {
		document.getElementById('n' + i).style.maxHeight = "5ch";
		document.getElementById('n_img' + i).src = "static/images/angle-down.svg";
	} else {
		document.getElementById('n' + i).style.maxHeight = "100ch";
		document.getElementById('n_img' + i).src = "static/images/angle-up.svg";
	}
}

$(document).ready(function() {
	connect();
});

function connect() {
	// Establish SSE connection
	const source = new EventSource("data");

	// list event listener
	source.addEventListener("list", function(event) {
		const lists = JSON.parse(event.data);
		// display received list with no score filtering
		display_data(lists, 0);

		// play the notification audio every time the server send new event
		var notif = document.getElementById("notif_audio");
		notif.play();

		// reset last updated time
		stopTimer()
		startTimer();

		// Score filtering handler
		$('button#min_score_button').click(function() {
			var e = document.getElementById("min_score");
			var min_score = e.options[e.selectedIndex].value;
			display_data(lists, min_score);
		});
	});

	source.addEventListener("msg", function(event) {
		// display received message
		const msge = JSON.parse(event.data);
		$('div#error_msg').empty().append(msge);
	});

	source.onerror = function(err) {
		switch (err.target.readyState) {
			// auto reconnecting
			case EventSource.CONNECTING:
				break;
				// if readyState == 2
			case EventSource.CLOSED:
				// call connect function to re-connect the server
				connect();
				break;
		}
	};
}

function display_data(data, min_score) {
	$('div#table_body').empty()
	var indx = 0;
	for (var i = 0; i < data.length; i++) {
		// check score
		if (data[i].Score > min_score) {
			indx = indx + 1;
			const container = document.createElement("div");
			container.className = "container";

			// Index column
			const index = document.createElement("div");
			index.className = "div_sn";
			index.innerHTML = indx;
			container.appendChild(index);

			// Score column
			const score = document.createElement("div");
			score.innerHTML = data[i].Score;
			if (data[i].Score > 8) {
				score.className = "div_score critical";
			} else {
				score.className = "div_score high";
			}

			container.appendChild(score);

			// CVE id column
			const ID = document.createElement("div");
			ID.className = "div_id";
			// CVE id nist link
			const a = document.createElement('a');
			const linkText = document.createTextNode(data[i].ID);
			a.appendChild(linkText);
			a.target = '_blank';
			a.title = data[i].ID;
			a.href = data[i].URL;
			ID.appendChild(a);
			container.appendChild(ID);

			// CVE description column
			const desc = document.createElement("div");
			desc.className = "div_desc";
			desc.id = "n" + i;
			desc.innerHTML = data[i].Description;
			const image = document.createElement("img");
			image.src = 'static/images/angle-down.svg';
			image.className = "expand_desc_arrow";
			image.id = "n_img" + i;
			desc.appendChild(image);
			desc.setAttribute("onclick", "expand_desc(" + i + ")");
			container.appendChild(desc);

			// Last update column
			const date = document.createElement("div");
			date.className = "div_date";
			date.innerHTML = data[i].Last_Updated;
			container.appendChild(date);

			$('div#table_body').append(container);
		}
	}
}

var w = null;

function startTimer() {

	// check whether Web Workers are supported
	if (typeof(Worker) !== "undefined") {
		// Check whether Web Worker has been created. If not, create a new Web Worker based on the Javascript file time_worker.js
		if (w == null) {
			w = new Worker("static/js/time_worker.js");
		}

		// Update last_date div with output from Web Worker
		w.onmessage = function(event) {
			document.getElementById("last_date").innerHTML = event.data;
		};
	} else {
		// Web workers are not supported
		document.getElementById("last_date").innerHTML = "Sorry, can't display last updated time your browser does not support Web Workers ";
	}
}

function stopTimer() {
	// if the worker is already created, terminate it
	if (w != null) {
		w.terminate();
		w = undefined;
	}
}
